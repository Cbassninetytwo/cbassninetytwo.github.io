(window["webpackJsonpGUI"] = window["webpackJsonpGUI"] || []).push([["addon-entry-editor-extra-keys"],{

/***/ "./src/addons/addons/editor-extra-keys/_runtime_entry.js":
/*!***************************************************************!*\
  !*** ./src/addons/addons/editor-extra-keys/_runtime_entry.js ***!
  \***************************************************************/
/*! exports provided: resources */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resources", function() { return resources; });
/* harmony import */ var _userscript_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userscript.js */ "./src/addons/addons/editor-extra-keys/userscript.js");
/* generated by pull.js */

var resources = {
  "userscript.js": _userscript_js__WEBPACK_IMPORTED_MODULE_0__["default"]
};

/***/ }),

/***/ "./src/addons/addons/editor-extra-keys/userscript.js":
/*!***********************************************************!*\
  !*** ./src/addons/addons/editor-extra-keys/userscript.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/* harmony default export */ __webpack_exports__["default"] = (function (_x) {
  return _ref2.apply(this, arguments);
});

function _ref2() {
  _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var addon, global, cons, msg, ScratchBlocks, defaultKeys, appendKeys, _loop, _i, _arr, updateExistingBlocks;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            appendKeys = function _appendKeys(keys, enableShiftKeys) {
              if (!defaultKeys) {
                defaultKeys = _toConsumableArray(keys);
              }

              if (!addon.self.disabled) {
                keys.push.apply(keys, [["-", "-"], [",", ","], [".", "."]]);
                keys.splice(5, 0, [msg("enter-key"), "enter"]);

                if (addon.settings.get("experimentalKeys")) {
                  keys.push.apply(keys, [["`", "`"], ["=", "="], ["[", "["], ["]", "]"], ["\\", "\\"], [";", ";"], ["'", "'"], ["/", "/"]]);
                }

                if (enableShiftKeys && addon.settings.get("shiftKeys")) {
                  keys.push.apply(keys, [["!", "!"], ["@", "@"], ["#", "#"], ["$", "$"], ["%", "%"], ["^", "^"], ["&", "&"], ["*", "*"], ["(", "("], [")", ")"], ["_", "_"], ["+", "+"], ["{", "{"], ["}", "}"], ["|", "|"], [":", ":"], ['"', '"'], ["?", "?"], ["<", "<"], [">", ">"], ["~", "~"]]);
                }

                if (addon.settings.get("twKeys")) {
                  keys.push.apply(keys, [["backspace", "backspace"], ["delete", "delete"], ["shift", "shift"], ["caps lock", "caps lock"], ["scroll lock", "scroll lock"], ["control", "control"], ["escape", "escape"], ["insert", "insert"], ["home", "home"], ["end", "end"], ["page up", "page up"], ["page down", "page down"]]);
                }
              }

              return keys;
            };

            addon = _ref.addon, global = _ref.global, cons = _ref.cons, msg = _ref.msg;
            _context.next = 4;
            return addon.tab.traps.getBlockly();

          case 4:
            ScratchBlocks = _context.sent;
            defaultKeys = null;

            _loop = function _loop() {
              var opcode = _arr[_i];
              var block = ScratchBlocks.Blocks[opcode];
              var originalInit = block.init;

              block.init = function () {
                var originalJsonInit = this.jsonInit;

                this.jsonInit = function (obj) {
                  appendKeys(obj.args0[0].options, opcode === "event_whenkeypressed");
                  return originalJsonInit.call(this, obj);
                };

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                return originalInit.call.apply(originalInit, [this].concat(args));
              };
            };

            for (_i = 0, _arr = ["sensing_keyoptions", "event_whenkeypressed"]; _i < _arr.length; _i++) {
              _loop();
            }

            updateExistingBlocks = function updateExistingBlocks() {
              var workspace = Blockly.getMainWorkspace();
              var flyout = workspace && workspace.getFlyout();

              if (workspace && flyout) {
                var allBlocks = [].concat(_toConsumableArray(workspace.getAllBlocks()), _toConsumableArray(flyout.getWorkspace().getAllBlocks()));

                var _iterator = _createForOfIteratorHelper(allBlocks),
                    _step;

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var block = _step.value;

                    if (block.type !== "event_whenkeypressed" && block.type !== "sensing_keyoptions") {
                      continue;
                    }

                    var input = block.inputList[0];

                    if (!input) {
                      continue;
                    }

                    var field = input.fieldRow.find(function (i) {
                      return i && Array.isArray(i.menuGenerator_);
                    });

                    if (!field) {
                      continue;
                    }

                    field.menuGenerator_ = appendKeys(defaultKeys ? _toConsumableArray(defaultKeys) : field.menuGenerator_, block.type === "event_whenkeypressed");
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
              }
            };

            updateExistingBlocks();
            addon.settings.addEventListener("change", updateExistingBlocks);
            addon.self.addEventListener("disabled", updateExistingBlocks);
            addon.self.addEventListener("reenabled", updateExistingBlocks);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _ref2.apply(this, arguments);
}

/***/ })

}]);
//# sourceMappingURL=addon-entry-editor-extra-keys.js.map