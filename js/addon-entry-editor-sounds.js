(window["webpackJsonpGUI"] = window["webpackJsonpGUI"] || []).push([["addon-entry-editor-sounds"],{

/***/ "./src/addons/addons/editor-sounds/_runtime_entry.js":
/*!***********************************************************!*\
  !*** ./src/addons/addons/editor-sounds/_runtime_entry.js ***!
  \***********************************************************/
/*! exports provided: resources */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resources", function() { return resources; });
/* harmony import */ var _userscript_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userscript.js */ "./src/addons/addons/editor-sounds/userscript.js");
/* generated by pull.js */

var resources = {
  "userscript.js": _userscript_js__WEBPACK_IMPORTED_MODULE_0__["default"]
};

/***/ }),

/***/ "./src/addons/addons/editor-sounds/userscript.js":
/*!*******************************************************!*\
  !*** ./src/addons/addons/editor-sounds/userscript.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/* harmony default export */ __webpack_exports__["default"] = (function (_x) {
  return _ref2.apply(this, arguments);
});

function _ref2() {
  _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var addon, global, console, ScratchBlocks, injectCurrent, originalInit;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            addon = _ref.addon, global = _ref.global, console = _ref.console;
            _context.next = 3;
            return addon.tab.traps.getBlockly();

          case 3:
            ScratchBlocks = _context.sent;

            injectCurrent = function injectCurrent() {
              var workspace = Blockly.getMainWorkspace();
              var pathToMedia = workspace.options.pathToMedia;
              ScratchBlocks.inject.loadSounds_(pathToMedia, workspace);
            }; // Add sounds to the current workspace


            injectCurrent(); // Add sounds to all future workspaces

            originalInit = ScratchBlocks.init_;

            ScratchBlocks.init_ = function () {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              var wksp = args[0];
              wksp.options.hasSounds = true;
              return originalInit.call.apply(originalInit, [this].concat(args));
            };

            addon.self.addEventListener("disabled", function () {
              var workspace = Blockly.getMainWorkspace();
              var audio = workspace.getAudioManager();
              delete audio.SOUNDS_.click;
              delete audio.SOUNDS_.delete;
            });
            addon.self.addEventListener("reenabled", injectCurrent);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _ref2.apply(this, arguments);
}

/***/ })

}]);
//# sourceMappingURL=addon-entry-editor-sounds.js.map