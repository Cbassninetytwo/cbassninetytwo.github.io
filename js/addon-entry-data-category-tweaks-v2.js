(window["webpackJsonpGUI"] = window["webpackJsonpGUI"] || []).push([["addon-entry-data-category-tweaks-v2"],{

/***/ "./src/addons/addons/data-category-tweaks-v2/_runtime_entry.js":
/*!*********************************************************************!*\
  !*** ./src/addons/addons/data-category-tweaks-v2/_runtime_entry.js ***!
  \*********************************************************************/
/*! exports provided: resources */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resources", function() { return resources; });
/* harmony import */ var _userscript_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userscript.js */ "./src/addons/addons/data-category-tweaks-v2/userscript.js");
/* generated by pull.js */

var resources = {
  "userscript.js": _userscript_js__WEBPACK_IMPORTED_MODULE_0__["default"]
};

/***/ }),

/***/ "./src/addons/addons/data-category-tweaks-v2/userscript.js":
/*!*****************************************************************!*\
  !*** ./src/addons/addons/data-category-tweaks-v2/userscript.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/* harmony default export */ __webpack_exports__["default"] = (function (_x) {
  return _ref2.apply(this, arguments);
});

function _ref2() {
  _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var addon, global, console, msg, safeMsg, ScratchBlocks, SMALL_GAP, BIG_GAP, vm, hasSeparateListCategory, separateVariablesByType, separateLocalVariables, moveReportersDown, DataCategory, variableCategory, listCategory, variableCategoryCallback, listCategoryCallback, oldShow, originalGetBlocksXML, dynamicEnableOrDisable;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            addon = _ref.addon, global = _ref.global, console = _ref.console, msg = _ref.msg, safeMsg = _ref.safeMsg;
            _context.next = 3;
            return addon.tab.traps.getBlockly();

          case 3:
            ScratchBlocks = _context.sent;
            SMALL_GAP = 8;
            BIG_GAP = 24;
            vm = addon.tab.traps.vm; // Used in setting change handler. Updated in getBlocksXML.
            // (Yes this is weird but it's how it was originally and I'm too scared to change it)

            hasSeparateListCategory = false;

            separateVariablesByType = function separateVariablesByType(toolboxXML) {
              var listButtonIndex = toolboxXML.findIndex(function (i) {
                return i.getAttribute("callbackkey") === "CREATE_LIST" || i.getAttribute("type") === "data_addtolist";
              });
              return {
                variables: toolboxXML.slice(0, listButtonIndex),
                lists: toolboxXML.slice(listButtonIndex, toolboxXML.length)
              };
            };

            separateLocalVariables = function separateLocalVariables(workspace, toolboxXML) {
              var _separateVariablesByT = separateVariablesByType(toolboxXML),
                  variables = _separateVariablesByT.variables,
                  lists = _separateVariablesByT.lists;

              var makeLabel = function makeLabel(l10n) {
                var label = document.createElement("label");
                label.setAttribute("text", msg(l10n));
                return label;
              };

              var fixGaps = function fixGaps(variables) {
                if (variables.length > 0) {
                  for (var i = 0; i < variables.length - 1; i++) {
                    variables[i].setAttribute("gap", SMALL_GAP);
                  }

                  variables[i].setAttribute("gap", BIG_GAP);
                }
              };

              var separateVariablesByScope = function separateVariablesByScope(xml) {
                var before = [];
                var global = [];
                var local = [];
                var after = [];

                var _iterator = _createForOfIteratorHelper(xml),
                    _step;

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var blockXML = _step.value;

                    if (blockXML.hasAttribute("id")) {
                      var id = blockXML.getAttribute("id");
                      var variable = workspace.getVariableById(id);

                      if (!variable || !variable.isLocal) {
                        global.push(blockXML);
                      } else {
                        local.push(blockXML);
                      }
                    } else if (global.length || local.length) {
                      after.push(blockXML);
                    } else {
                      before.push(blockXML);
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                var result = before;

                if (global.length) {
                  result.push(makeLabel("for-all-sprites"));
                  fixGaps(global);
                  result.push.apply(result, global);
                }

                if (local.length) {
                  result.push(makeLabel("for-this-sprite-only"));
                  fixGaps(local);
                  result.push.apply(result, local);
                }

                return result.concat(after);
              };

              return separateVariablesByScope(variables).concat(separateVariablesByScope(lists));
            };

            moveReportersDown = function moveReportersDown(toolboxXML) {
              var _separateVariablesByT2 = separateVariablesByType(toolboxXML),
                  variables = _separateVariablesByT2.variables,
                  lists = _separateVariablesByT2.lists;

              var moveReportersToEnd = function moveReportersToEnd(xml) {
                var reporters = [];
                var everythingElse = [];

                var _iterator2 = _createForOfIteratorHelper(xml),
                    _step2;

                try {
                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    var blockXML = _step2.value;

                    if (blockXML.hasAttribute("id") || blockXML.tagName === "BUTTON") {
                      // Round reporters and the create variable button
                      reporters.push(blockXML);
                    } else {
                      // Everything else like "change variable by 1"
                      everythingElse.push(blockXML);
                    }
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }

                if (everythingElse.length) {
                  everythingElse[everythingElse.length - 1].setAttribute("gap", BIG_GAP);
                }

                return everythingElse.concat(reporters);
              };

              return moveReportersToEnd(variables).concat(moveReportersToEnd(lists));
            };

            DataCategory = ScratchBlocks.DataCategory;

            variableCategoryCallback = function variableCategoryCallback(workspace) {
              var result = DataCategory(workspace);

              if (!addon.self.disabled && addon.settings.get("moveReportersDown")) {
                result = moveReportersDown(result);
              }

              if (!addon.self.disabled && addon.settings.get("separateLocalVariables")) {
                result = separateLocalVariables(workspace, result);
              }

              if (addon.self.disabled || !hasSeparateListCategory) {
                return result;
              }

              var _separateVariablesByT3 = separateVariablesByType(result),
                  variables = _separateVariablesByT3.variables,
                  lists = _separateVariablesByT3.lists;

              variableCategory = variables;
              listCategory = lists;
              return variableCategory;
            };

            listCategoryCallback = function listCategoryCallback() {
              // Computed in variable category callback, which should be called before this method.
              return listCategory;
            }; // Each time a new workspace is made, these callbacks are reset, so re-register whenever a flyout is shown.
            // https://github.com/LLK/scratch-blocks/blob/61f02e4cac0f963abd93013842fe536ef24a0e98/core/flyout_base.js#L469


            oldShow = ScratchBlocks.Flyout.prototype.show;

            ScratchBlocks.Flyout.prototype.show = function (xmlList) {
              this.workspace_.registerToolboxCategoryCallback("VARIABLE", variableCategoryCallback);
              this.workspace_.registerToolboxCategoryCallback("LIST", listCategoryCallback);
              return oldShow.call(this, xmlList);
            }; // Use Scratch's extension category mechanism to replace the data category with our own.
            // https://github.com/LLK/scratch-gui/blob/ddd2fa06f2afa140a46ec03be91796ded861e65c/src/containers/blocks.jsx#L344
            // https://github.com/LLK/scratch-gui/blob/2ceab00370ad7bd8ecdf5c490e70fd02152b3e2a/src/lib/make-toolbox-xml.js#L763
            // https://github.com/LLK/scratch-vm/blob/a0c11d6d8664a4f2d55632e70630d09ec6e9ae28/src/engine/runtime.js#L1381


            originalGetBlocksXML = vm.runtime.getBlocksXML;

            vm.runtime.getBlocksXML = function (target) {
              var result = originalGetBlocksXML.call(this, target);
              hasSeparateListCategory = addon.settings.get("separateListCategory");

              if (!addon.self.disabled && hasSeparateListCategory) {
                result.push({
                  id: "data",
                  xml: "\n        <category\n          name=\"%{BKY_CATEGORY_VARIABLES}\"\n          id=\"variables\"\n          colour=\"#FF8C1A\"\n          secondaryColour=\"#DB6E00\"\n          custom=\"VARIABLE\">\n        </category>\n        <category\n          name=\"".concat(safeMsg("list-category"), "\"\n          id=\"lists\"\n          colour=\"#FF661A\"\n          secondaryColour=\"#FF5500\"\n          custom=\"LIST\">\n        </category>")
                });
              }

              return result;
            }; // If editingTarget is set, the editor has already rendered and we have to tell it to rerender.


            if (vm.editingTarget) {
              vm.emitWorkspaceUpdate();
            }

            addon.settings.addEventListener("change", function (e) {
              // When the separate list category option changes, we need to do a workspace update.
              // For all other options, just refresh the toolbox.
              // Always doing both of these in response to a settings change causes many issues.
              if (addon.settings.get("separateListCategory") !== hasSeparateListCategory) {
                if (vm.editingTarget) {
                  vm.emitWorkspaceUpdate();
                }
              } else {
                var workspace = Blockly.getMainWorkspace();

                if (workspace) {
                  workspace.refreshToolboxSelection_();
                }
              }
            });

            dynamicEnableOrDisable = function dynamicEnableOrDisable() {
              // Enabling/disabling is similar to changing settings.
              // If separate list category is enabled, a workspace update is needed.
              // If any other setting is enabled, refresh the toolbox.
              if (addon.settings.get("separateListCategory")) {
                if (vm.editingTarget) {
                  vm.emitWorkspaceUpdate();
                }
              }

              if (addon.settings.get("separateLocalVariables") || addon.settings.get("moveReportersDown")) {
                var workspace = Blockly.getMainWorkspace();

                if (workspace) {
                  workspace.refreshToolboxSelection_();
                }
              }
            };

            addon.self.addEventListener("disabled", function () {
              dynamicEnableOrDisable();
            });
            addon.self.addEventListener("reenabled", function () {
              dynamicEnableOrDisable();
            });

          case 23:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _ref2.apply(this, arguments);
}

/***/ })

}]);
//# sourceMappingURL=addon-entry-data-category-tweaks-v2.js.map