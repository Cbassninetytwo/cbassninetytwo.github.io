(window["webpackJsonpGUI"] = window["webpackJsonpGUI"] || []).push([["addon-entry-zebra-striping"],{

/***/ "./node_modules/css-loader/index.js!./src/addons/addons/zebra-striping/userstyle.css":
/*!**********************************************************************************!*\
  !*** ./node_modules/css-loader!./src/addons/addons/zebra-striping/userstyle.css ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ":root {\n  --zebraStriping-percent: calc(var(--zebraStriping-shadeNumber) * var(--zebraStriping-intensity) / 100);\n  --zebraStriping-bright: calc(1 + var(--zebraStriping-percent));\n  --zebraStriping-saturate: calc(1 - var(--zebraStriping-percent));\n  --zebraStriping-filter: brightness(var(--zebraStriping-bright)) saturate(var(--zebraStriping-saturate));\n  /* \"Temporary\" value, gets replaced by userscript */\n  --zebraStriping-replacementGlow: url(#blocklyReplacementGlowFilter);\n}\n\n.sa-zebra-stripe {\n  filter: var(--zebraStriping-filter);\n}\n\n.sa-zebra-stripe[filter*=\"#blocklyReplacementGlowFilter\"] {\n  filter: var(--zebraStriping-filter) var(--zebraStriping-replacementGlow);\n}\n\n/* editor-stepping and debugger compatibility */\n/* this is pretty horrible */\n.sa-zebra-stripe[style*=\"#sa_glower_filter0\"] {\n  /* !important because editor-stepping Highlighter uses inline styles */\n  filter: var(--zebraStriping-filter) url(\"#sa_glower_filter0\") !important;\n}\n.sa-zebra-stripe[style*=\"#sa_glower_filter1\"] {\n  filter: var(--zebraStriping-filter) url(\"#sa_glower_filter1\") !important;\n}\n", ""]);

// exports


/***/ }),

/***/ "./src/addons/addons/zebra-striping/_runtime_entry.js":
/*!************************************************************!*\
  !*** ./src/addons/addons/zebra-striping/_runtime_entry.js ***!
  \************************************************************/
/*! exports provided: resources */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resources", function() { return resources; });
/* harmony import */ var _userscript_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userscript.js */ "./src/addons/addons/zebra-striping/userscript.js");
/* harmony import */ var _css_loader_userstyle_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! css-loader!./userstyle.css */ "./node_modules/css-loader/index.js!./src/addons/addons/zebra-striping/userstyle.css");
/* harmony import */ var _css_loader_userstyle_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_userstyle_css__WEBPACK_IMPORTED_MODULE_1__);
/* generated by pull.js */


var resources = {
  "userscript.js": _userscript_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  "userstyle.css": _css_loader_userstyle_css__WEBPACK_IMPORTED_MODULE_1___default.a
};

/***/ }),

/***/ "./src/addons/addons/zebra-striping/userscript.js":
/*!********************************************************!*\
  !*** ./src/addons/addons/zebra-striping/userscript.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/* harmony default export */ __webpack_exports__["default"] = (function (_x) {
  return _ref2.apply(this, arguments);
});

function _ref2() {
  _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var addon, msg, global, console, vm, ScratchBlocks, updateCssVariables, originalRender, replacementGlowEl;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            addon = _ref.addon, msg = _ref.msg, global = _ref.global, console = _ref.console;
            vm = addon.tab.traps.vm;
            _context.next = 4;
            return addon.tab.traps.getBlockly();

          case 4:
            ScratchBlocks = _context.sent;

            updateCssVariables = function updateCssVariables() {
              var map = {
                lighter: 1,
                darker: -1
              };
              document.documentElement.style.setProperty('--zebraStriping-shadeNumber', map[addon.settings.get("shade")]);
            };

            addon.settings.addEventListener("change", updateCssVariables);
            updateCssVariables();
            originalRender = ScratchBlocks.BlockSvg.prototype.render;

            ScratchBlocks.BlockSvg.prototype.render = function (opt_bubble) {
              // Any changes that affect block striping should bubble to the top block of the script.
              // The top block of the script is responsible for striping all of its children.
              // This way stripes are computed exactly once.
              if (!this.isInFlyout && !this.isShadow() && this.getParent() === null) {
                var stripeState = new Map(); // Conveniently getDescendants() returns blocks in an order such that each block's
                // parent will always come before that block (except the first block which has no
                // parent).

                var _iterator = _createForOfIteratorHelper(this.getDescendants()),
                    _step;

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var block = _step.value;
                    var parent = block.getSurroundParent();
                    var isStriped = false;

                    if (parent) {
                      if (block.isShadow()) {
                        isStriped = !!stripeState.get(parent);
                      } else if (parent.getCategory() === block.getCategory()) {
                        isStriped = !stripeState.get(parent);
                      }
                    }

                    stripeState.set(block, isStriped);
                    var elements = [block.svgPath_];

                    var _iterator2 = _createForOfIteratorHelper(block.inputList),
                        _step2;

                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                        var input = _step2.value;

                        if (input.outlinePath) {
                          elements.push(input.outlinePath);
                        }

                        var _iterator3 = _createForOfIteratorHelper(input.fieldRow),
                            _step3;

                        try {
                          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                            var field = _step3.value;

                            if (field.fieldGroup_) {
                              elements.push(field.fieldGroup_);
                            }
                          }
                        } catch (err) {
                          _iterator3.e(err);
                        } finally {
                          _iterator3.f();
                        }
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }

                    for (var _i = 0, _elements = elements; _i < _elements.length; _i++) {
                      var el = _elements[_i];
                      el.classList.toggle("sa-zebra-stripe", isStriped);
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
              }

              return originalRender.call(this, opt_bubble);
            };

            if (vm.editingTarget) {
              vm.emitWorkspaceUpdate();
            } // The replacement glow filter's ID is randomly generated and changes
            // when the workspace is reloaded (which includes loading the page and
            // seeing the project page then seeing inside).
            // As we need to stack the filter with the striping filter in the
            // userstyle, we need to use the usersciript to get the filter's ID
            // and set a CSS variable on the document's root.


          case 11:
            if (false) {}

            _context.next = 14;
            return addon.tab.waitForElement('filter[id*="blocklyReplacementGlowFilter"]', {
              markAsSeen: true,
              reduxEvents: ["scratch-gui/mode/SET_PLAYER", "fontsLoaded/SET_FONTS_LOADED", "scratch-gui/locales/SELECT_LOCALE"],
              reduxCondition: function reduxCondition(state) {
                return !state.scratchGui.mode.isPlayerOnly;
              }
            });

          case 14:
            replacementGlowEl = _context.sent;
            document.documentElement.style.setProperty("--zebraStriping-replacementGlow", "url(#".concat(replacementGlowEl.id, ")"));
            _context.next = 11;
            break;

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _ref2.apply(this, arguments);
}

/***/ })

}]);
//# sourceMappingURL=addon-entry-zebra-striping.js.map