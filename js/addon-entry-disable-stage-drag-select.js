(window["webpackJsonpGUI"] = window["webpackJsonpGUI"] || []).push([["addon-entry-disable-stage-drag-select"],{

/***/ "./src/addons/addons/disable-stage-drag-select/_runtime_entry.js":
/*!***********************************************************************!*\
  !*** ./src/addons/addons/disable-stage-drag-select/_runtime_entry.js ***!
  \***********************************************************************/
/*! exports provided: resources */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resources", function() { return resources; });
/* harmony import */ var _userscript_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userscript.js */ "./src/addons/addons/disable-stage-drag-select/userscript.js");
/* generated by pull.js */

var resources = {
  "userscript.js": _userscript_js__WEBPACK_IMPORTED_MODULE_0__["default"]
};

/***/ }),

/***/ "./src/addons/addons/disable-stage-drag-select/userscript.js":
/*!*******************************************************************!*\
  !*** ./src/addons/addons/disable-stage-drag-select/userscript.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/(function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var addon, console, vm, shiftKeyPressed, oldStopDrag, oldGetTargetIdForDrawableId;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            addon = _ref.addon, console = _ref.console;
            vm = addon.tab.traps.vm;
            shiftKeyPressed = false;
            document.addEventListener("mousedown", function (e) {
              shiftKeyPressed = e.shiftKey;
            }, {
              capture: true
            }); // Do not focus sprite after dragging it

            oldStopDrag = vm.stopDrag;

            vm.stopDrag = function () {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              if (shiftKeyPressed || addon.self.disabled) return oldStopDrag.call.apply(oldStopDrag, [this].concat(args));
              var setEditingTarget = this.setEditingTarget;

              this.setEditingTarget = function () {};

              var r = oldStopDrag.call.apply(oldStopDrag, [this].concat(args));
              this.setEditingTarget = setEditingTarget;
              return r;
            }; // Don't let the editor drag sprites that aren't marked as draggable


            oldGetTargetIdForDrawableId = vm.getTargetIdForDrawableId;

            vm.getTargetIdForDrawableId = function () {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }

              var targetId = oldGetTargetIdForDrawableId.call.apply(oldGetTargetIdForDrawableId, [this].concat(args));
              if (shiftKeyPressed || addon.self.disabled) return targetId;

              if (targetId !== null) {
                var target = this.runtime.getTargetById(targetId);

                if (target && !target.draggable) {
                  return null;
                }
              }

              return targetId;
            };

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
})());

/***/ })

}]);
//# sourceMappingURL=addon-entry-disable-stage-drag-select.js.map