(window["webpackJsonpGUI"] = window["webpackJsonpGUI"] || []).push([["addon-entry-custom-zoom"],{

/***/ "./node_modules/css-loader/index.js!./src/addons/addons/custom-zoom/style.css":
/*!***************************************************************************!*\
  !*** ./node_modules/css-loader!./src/addons/addons/custom-zoom/style.css ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".sa-custom-zoom-area {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  width: 60px;\n  height: 148px;\n  pointer-events: none;\n}\n.blocklyZoom > * {\n  transition: transform var(--sa-custom-zoom-speed, 0) ease-in-out;\n}\n.sa-custom-zoom-hidden > * {\n  transform: translateX(80px);\n}\n", ""]);

// exports


/***/ }),

/***/ "./src/addons/addons/custom-zoom/_runtime_entry.js":
/*!*********************************************************!*\
  !*** ./src/addons/addons/custom-zoom/_runtime_entry.js ***!
  \*********************************************************/
/*! exports provided: resources */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resources", function() { return resources; });
/* harmony import */ var _userscript_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userscript.js */ "./src/addons/addons/custom-zoom/userscript.js");
/* harmony import */ var _css_loader_style_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! css-loader!./style.css */ "./node_modules/css-loader/index.js!./src/addons/addons/custom-zoom/style.css");
/* harmony import */ var _css_loader_style_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_style_css__WEBPACK_IMPORTED_MODULE_1__);
/* generated by pull.js */


var resources = {
  "userscript.js": _userscript_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  "style.css": _css_loader_style_css__WEBPACK_IMPORTED_MODULE_1___default.a
};

/***/ }),

/***/ "./src/addons/addons/custom-zoom/userscript.js":
/*!*****************************************************!*\
  !*** ./src/addons/addons/custom-zoom/userscript.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/* harmony default export */ __webpack_exports__["default"] = (function (_x) {
  return _ref2.apply(this, arguments);
});

function _ref2() {
  _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var addon, global, console, controlsRect, previousIsHovered, speeds, customZoomAreaElement, update, getZoomControls, onMouseMove, updateRect, onResize;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onResize = function _onResize() {
              if (addon.tab.editorMode === "editor" && addon.settings.get("autohide")) {
                updateRect();
              }
            };

            updateRect = function _updateRect() {
              controlsRect = customZoomAreaElement.getBoundingClientRect();
            };

            onMouseMove = function _onMouseMove(e) {
              var isHovered = e.x > controlsRect.left && e.x < controlsRect.right && e.y > controlsRect.top && e.y < controlsRect.bottom;

              if (isHovered !== previousIsHovered) {
                previousIsHovered = isHovered;
                var svgGroup = getZoomControls();

                if (svgGroup) {
                  svgGroup.style.setProperty("--sa-custom-zoom-speed", speeds[addon.settings.get("speed")]);
                  svgGroup.classList.toggle("sa-custom-zoom-hidden", !isHovered);
                }
              }
            };

            getZoomControls = function _getZoomControls() {
              var zoomControls = Blockly.getMainWorkspace().zoomControls_;
              if (zoomControls) return zoomControls.svgGroup_;
              return null;
            };

            update = function _update() {
              document.removeEventListener("mousemove", onMouseMove);
              if (addon.tab.editorMode !== "editor") return;
              Blockly.getMainWorkspace().options.zoomOptions.maxScale = addon.settings.get("maxZoom") / 100;
              Blockly.getMainWorkspace().options.zoomOptions.minScale = addon.settings.get("minZoom") / 100;
              Blockly.getMainWorkspace().options.zoomOptions.startScale = addon.settings.get("startZoom") / 100;
              Blockly.getMainWorkspace().options.zoomOptions.scaleSpeed = 1 + 0.2 * (addon.settings.get("zoomSpeed") / 100);
              var svgGroup = getZoomControls();
              var autohide = addon.settings.get("autohide");
              if (svgGroup) svgGroup.classList.toggle("sa-custom-zoom-hidden", autohide);

              if (autohide) {
                var injectionDiv = document.querySelector(".injectionDiv");
                injectionDiv.appendChild(customZoomAreaElement);
                updateRect();
                document.addEventListener("mousemove", onMouseMove);
              }
            };

            addon = _ref.addon, global = _ref.global, console = _ref.console;
            _context.next = 8;
            return addon.tab.traps.getBlockly();

          case 8:
            previousIsHovered = false;
            speeds = {
              none: "0s",
              short: "0.25s",
              default: "0.5s",
              long: "1s"
            };
            customZoomAreaElement = document.createElement("div");
            customZoomAreaElement.className = "sa-custom-zoom-area";
            _context.next = 14;
            return addon.tab.waitForElement(".blocklyZoom");

          case 14:
            update();
            addon.tab.addEventListener("urlChange", update);
            addon.settings.addEventListener("change", update);
            window.addEventListener("resize", onResize);

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _ref2.apply(this, arguments);
}

/***/ })

}]);
//# sourceMappingURL=addon-entry-custom-zoom.js.map