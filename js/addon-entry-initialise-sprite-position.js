(window["webpackJsonpGUI"] = window["webpackJsonpGUI"] || []).push([["addon-entry-initialise-sprite-position"],{

/***/ "./src/addons/addons/initialise-sprite-position/_runtime_entry.js":
/*!************************************************************************!*\
  !*** ./src/addons/addons/initialise-sprite-position/_runtime_entry.js ***!
  \************************************************************************/
/*! exports provided: resources */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resources", function() { return resources; });
/* harmony import */ var _userscript_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userscript.js */ "./src/addons/addons/initialise-sprite-position/userscript.js");
/* generated by pull.js */

var resources = {
  "userscript.js": _userscript_js__WEBPACK_IMPORTED_MODULE_0__["default"]
};

/***/ }),

/***/ "./src/addons/addons/initialise-sprite-position/userscript.js":
/*!********************************************************************!*\
  !*** ./src/addons/addons/initialise-sprite-position/userscript.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/* harmony default export */ __webpack_exports__["default"] = (function (_x) {
  return _ref2.apply(this, arguments);
});

function _ref2() {
  _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var addon, vm, oldAddSprite, registerDupPrototype;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            addon = _ref.addon;
            vm = addon.tab.traps.vm;
            oldAddSprite = vm.constructor.prototype.addSprite;

            vm.constructor.prototype.addSprite = function (input) {
              var _spriteObj$costumes, _spriteObj$costumes$;

              var spriteObj,
                  stringify = true;

              if (_typeof(input) === "object") {
                spriteObj = input;
                stringify = false;
              } else spriteObj = JSON.parse(input);

              var isEmpty = ((_spriteObj$costumes = spriteObj.costumes) === null || _spriteObj$costumes === void 0 ? void 0 : (_spriteObj$costumes$ = _spriteObj$costumes[0]) === null || _spriteObj$costumes$ === void 0 ? void 0 : _spriteObj$costumes$.baseLayerMD5) === "cd21514d0531fdffb22204e0ec5ed84a.svg";

              if (!addon.self.disabled && (isEmpty || !spriteObj.tags || !addon.settings.get("library"))) {
                if (spriteObj.scratchX) {
                  spriteObj.scratchX = addon.settings.get("x");
                  spriteObj.scratchY = addon.settings.get("y");
                }

                if (spriteObj.x) {
                  spriteObj.x = addon.settings.get("x");
                  spriteObj.y = addon.settings.get("y");
                }
              }

              return oldAddSprite.call(this, stringify ? JSON.stringify(spriteObj) : spriteObj);
            };

            registerDupPrototype = function registerDupPrototype() {
              var targetPrototype = vm.runtime.getTargetForStage().constructor.prototype;
              var oldDuplicate = targetPrototype.duplicate;

              targetPrototype.duplicate = function () {
                var _this = this;

                return oldDuplicate.call(this).then(function (newSprite) {
                  if (!addon.self.disabled) {
                    switch (addon.settings.get("duplicate")) {
                      case "custom":
                        newSprite.setXY(addon.settings.get("x"), addon.settings.get("y"));
                        break;

                      case "keep":
                        newSprite.setXY(_this.x, _this.y);
                    }
                  }

                  return newSprite;
                });
              };
            };

            if (vm.runtime.getTargetForStage()) {
              registerDupPrototype();
            } else {
              vm.runtime.once("PROJECT_LOADED", registerDupPrototype);
            }

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _ref2.apply(this, arguments);
}

/***/ })

}]);
//# sourceMappingURL=addon-entry-initialise-sprite-position.js.map