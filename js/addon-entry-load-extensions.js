(window["webpackJsonpGUI"] = window["webpackJsonpGUI"] || []).push([["addon-entry-load-extensions"],{

/***/ "./src/addons/addons/load-extensions/_runtime_entry.js":
/*!*************************************************************!*\
  !*** ./src/addons/addons/load-extensions/_runtime_entry.js ***!
  \*************************************************************/
/*! exports provided: resources */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resources", function() { return resources; });
/* harmony import */ var _userscript_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userscript.js */ "./src/addons/addons/load-extensions/userscript.js");
/* generated by pull.js */

var resources = {
  "userscript.js": _userscript_js__WEBPACK_IMPORTED_MODULE_0__["default"]
};

/***/ }),

/***/ "./src/addons/addons/load-extensions/userscript.js":
/*!*********************************************************!*\
  !*** ./src/addons/addons/load-extensions/userscript.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/* harmony default export */ __webpack_exports__["default"] = (function (_x) {
  return _ref2.apply(this, arguments);
});

function _ref2() {
  _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var addon, global, console, vm, loadExtensions;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            addon = _ref.addon, global = _ref.global, console = _ref.console;
            vm = addon.tab.traps.vm;

            loadExtensions = function loadExtensions() {
              if (addon.self.disabled) return; // IDs are taken from https://github.com/LLK/scratch-vm/blob/ffa78b91b8645b6a8c80f698a3637bb73abf2931/src/extension-support/extension-manager.js#L11

              var EXTENSIONS = ["music", "pen", "text2speech", "translate"];

              for (var _i = 0, _EXTENSIONS = EXTENSIONS; _i < _EXTENSIONS.length; _i++) {
                var ext = _EXTENSIONS[_i];

                // Check if setting enabled and it's not already loaded
                if (addon.settings.get(ext) && !vm.extensionManager.isExtensionLoaded(ext)) {
                  vm.extensionManager.loadExtensionIdSync(ext);
                }
              }
            };

            if (vm.editingTarget) {
              loadExtensions();
            } else {
              vm.runtime.once("PROJECT_LOADED", loadExtensions);
            }

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _ref2.apply(this, arguments);
}

/***/ })

}]);
//# sourceMappingURL=addon-entry-load-extensions.js.map